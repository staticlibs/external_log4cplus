diff --git a/include/log4cplus/appender.h b/include/log4cplus/appender.h
index 5eca94c..b30af3a 100644
--- a/include/log4cplus/appender.h
+++ b/include/log4cplus/appender.h
@@ -183,7 +183,7 @@ namespace log4cplus {
         /**
          * Set the {@link ErrorHandler} for this Appender.
          */
-        virtual void setErrorHandler(std::auto_ptr<ErrorHandler> eh);
+        virtual void setErrorHandler(std::unique_ptr<ErrorHandler> eh);
 
         /**
          * Return the currently set {@link ErrorHandler} for this
@@ -196,7 +196,7 @@ namespace log4cplus {
          * their own (fixed) layouts or do not use one. For example, the
          * SocketAppender ignores the layout set here.
          */
-        virtual void setLayout(std::auto_ptr<Layout> layout);
+        virtual void setLayout(std::unique_ptr<Layout> layout);
 
         /**
          * Returns the layout of this appender. The value may be NULL.
@@ -254,7 +254,7 @@ namespace log4cplus {
       // Data
         /** The layout variable does not need to be set if the appender
          *  implementation has its own layout. */
-        std::auto_ptr<Layout> layout;
+        std::unique_ptr<Layout> layout;
 
         /** Appenders are named. */
         log4cplus::tstring name;
@@ -267,10 +267,10 @@ namespace log4cplus {
         log4cplus::spi::FilterPtr filter;
 
         /** It is assumed and enforced that errorHandler is never null. */
-        std::auto_ptr<ErrorHandler> errorHandler;
+        std::unique_ptr<ErrorHandler> errorHandler;
 
         //! Optional system wide synchronization lock.
-        std::auto_ptr<helpers::LockFile> lockFile;
+        std::unique_ptr<helpers::LockFile> lockFile;
 
         //! Use lock file for inter-process synchronization of access
         //! to log file.
diff --git a/include/log4cplus/hierarchy.h b/include/log4cplus/hierarchy.h
index 2c023a9..04e150b 100644
--- a/include/log4cplus/hierarchy.h
+++ b/include/log4cplus/hierarchy.h
@@ -212,7 +212,7 @@ namespace log4cplus {
         /**
          * Set the default LoggerFactory instance.
          */
-        virtual void setLoggerFactory(std::auto_ptr<spi::LoggerFactory> factory);
+        virtual void setLoggerFactory(std::unique_ptr<spi::LoggerFactory> factory);
         
         /**
          * Returns the default LoggerFactory instance.
@@ -297,7 +297,7 @@ namespace log4cplus {
 
      // Data
         thread::Mutex hashtable_mutex;
-        std::auto_ptr<spi::LoggerFactory> defaultFactory;
+        std::unique_ptr<spi::LoggerFactory> defaultFactory;
         ProvisionNodeMap provisionNodes;
         LoggerMap loggerPtrs;
         Logger root;
diff --git a/include/log4cplus/spi/factory.h b/include/log4cplus/spi/factory.h
index 709edf5..3309c10 100644
--- a/include/log4cplus/spi/factory.h
+++ b/include/log4cplus/spi/factory.h
@@ -84,7 +84,7 @@ namespace log4cplus {
         class LOG4CPLUS_EXPORT LayoutFactory : public BaseFactory {
         public:
             typedef Layout ProductType;
-            typedef std::auto_ptr<Layout> ProductPtr;
+            typedef std::unique_ptr<Layout> ProductPtr;
 
             LayoutFactory();
             virtual ~LayoutFactory() = 0;
@@ -92,7 +92,7 @@ namespace log4cplus {
             /**
              * Create a "Layout" object.
              */
-            virtual std::auto_ptr<Layout> createObject(const log4cplus::helpers::Properties& props) = 0;
+            virtual std::unique_ptr<Layout> createObject(const log4cplus::helpers::Properties& props) = 0;
         };
 
 
@@ -159,7 +159,7 @@ namespace log4cplus {
              * Used to enter an object into the registry.  (The registry now
              *  owns <code>object</code>.)
              */
-            bool put(std::auto_ptr<T> object) {
+            bool put(std::unique_ptr<T> object) {
                  bool putValResult = putVal(object->getTypeName(), object.get());
                  object.release();
                  return putValResult; 
@@ -246,7 +246,7 @@ namespace log4cplus {
 
         #define LOG4CPLUS_REG_PRODUCT(reg, productprefix, productname, productns, productfact) \
         reg.put (																               \
-            std::auto_ptr<productfact> (                                                       \
+            std::unique_ptr<productfact> (                                                       \
                     new log4cplus::spi::FactoryTempl<productns productname, productfact> (     \
                     LOG4CPLUS_TEXT(productprefix)                                              \
                     LOG4CPLUS_TEXT(#productname))))
@@ -264,7 +264,7 @@ namespace log4cplus {
             log4cplus::spi::FilterFactory)
 
         #define LOG4CPLUS_REG_LOCALE(reg, name, factory)            \
-            reg.put (std::auto_ptr<log4cplus::spi::LocaleFactory> ( \
+            reg.put (std::unique_ptr<log4cplus::spi::LocaleFactory> ( \
                     new factory (name)))
     } // namespace spi
 }
diff --git a/include/log4cplus/spi/loggingevent.h b/include/log4cplus/spi/loggingevent.h
index e57bd6e..cc6d24f 100644
--- a/include/log4cplus/spi/loggingevent.h
+++ b/include/log4cplus/spi/loggingevent.h
@@ -102,7 +102,7 @@ namespace log4cplus {
            /** Returns a copy of this object.  Derived classes
              *  should override this method.
              */
-            virtual std::auto_ptr<InternalLoggingEvent> clone() const;
+            virtual std::unique_ptr<InternalLoggingEvent> clone() const;
 
 
 
diff --git a/src/appender.cxx b/src/appender.cxx
index 56f6f9f..bf51644 100644
--- a/src/appender.cxx
+++ b/src/appender.cxx
@@ -121,14 +121,14 @@ Appender::Appender(const log4cplus::helpers::Properties & properties)
         helpers::Properties layoutProperties =
                 properties.getPropertySubset( LOG4CPLUS_TEXT("layout.") );
         try {
-            std::auto_ptr<Layout> newLayout(factory->createObject(layoutProperties));
+            std::unique_ptr<Layout> newLayout(factory->createObject(layoutProperties));
             if(newLayout.get() == 0) {
                 helpers::getLogLog().error(
                     LOG4CPLUS_TEXT("Failed to create appender: ")
                     + factoryName);
             }
             else {
-                layout = newLayout;
+                layout = std::move(newLayout);
             }
         }
         catch(std::exception const & e) {
@@ -323,7 +323,7 @@ Appender::getErrorHandler()
 
 
 void
-Appender::setErrorHandler(std::auto_ptr<ErrorHandler> eh)
+Appender::setErrorHandler(std::unique_ptr<ErrorHandler> eh)
 {
     if (! eh.get())
     {
@@ -336,17 +336,17 @@ Appender::setErrorHandler(std::auto_ptr<ErrorHandler> eh)
 
     thread::MutexGuard guard (access_mutex);
 
-    this->errorHandler = eh;
+    this->errorHandler = std::move(eh);
 }
 
 
 
 void
-Appender::setLayout(std::auto_ptr<Layout> lo)
+Appender::setLayout(std::unique_ptr<Layout> lo)
 {
     thread::MutexGuard guard (access_mutex);
 
-    this->layout = lo;
+    this->layout = std::move(lo);
 }
 
 
diff --git a/src/hierarchy.cxx b/src/hierarchy.cxx
index 538705e..45b926c 100644
--- a/src/hierarchy.cxx
+++ b/src/hierarchy.cxx
@@ -216,9 +216,9 @@ Hierarchy::resetConfiguration()
 
 
 void 
-Hierarchy::setLoggerFactory(std::auto_ptr<spi::LoggerFactory> factory) 
+Hierarchy::setLoggerFactory(std::unique_ptr<spi::LoggerFactory> factory) 
 { 
-    defaultFactory = factory; 
+    defaultFactory = std::move(factory); 
 }
 
 
diff --git a/src/loggingevent.cxx b/src/loggingevent.cxx
index 5279a1e..abb439c 100644
--- a/src/loggingevent.cxx
+++ b/src/loggingevent.cxx
@@ -189,10 +189,10 @@ InternalLoggingEvent::getType() const
 
 
 
-std::auto_ptr<InternalLoggingEvent>
+std::unique_ptr<InternalLoggingEvent>
 InternalLoggingEvent::clone() const
 {
-    std::auto_ptr<InternalLoggingEvent> tmp(new InternalLoggingEvent(*this));
+    std::unique_ptr<InternalLoggingEvent> tmp(new InternalLoggingEvent(*this));
     return tmp;
 }
 
diff --git a/tests/customloglevel_test/main.cxx b/tests/customloglevel_test/main.cxx
index 459e7a7..be53470 100644
--- a/tests/customloglevel_test/main.cxx
+++ b/tests/customloglevel_test/main.cxx
@@ -21,7 +21,7 @@ main()
         log4cplus::initialize ();
         SharedAppenderPtr append_1(new ConsoleAppender());
         append_1->setName(LOG4CPLUS_TEXT("First"));
-        // append_1->setLayout( std::auto_ptr<Layout>(new TTCCLayout()) );
+        // append_1->setLayout( std::unique_ptr<Layout>(new TTCCLayout()) );
         cout << "Getting root logger...DONE" << endl;
         Logger::getRoot().addAppender(append_1);
 
diff --git a/tests/fileappender_test/main.cxx b/tests/fileappender_test/main.cxx
index b31f1aa..c0394ca 100644
--- a/tests/fileappender_test/main.cxx
+++ b/tests/fileappender_test/main.cxx
@@ -19,7 +19,7 @@ main()
     SharedAppenderPtr append_1(
         new RollingFileAppender(LOG4CPLUS_TEXT("Test.log"), 5*1024, 5));
     append_1->setName(LOG4CPLUS_TEXT("First"));
-    append_1->setLayout( std::auto_ptr<Layout>(new TTCCLayout()) );
+    append_1->setLayout( std::unique_ptr<Layout>(new TTCCLayout()) );
     Logger::getRoot().addAppender(append_1);
 
     Logger root = Logger::getRoot();
diff --git a/tests/ndc_test/main.cxx b/tests/ndc_test/main.cxx
index 3eccdd0..b96ab6b 100644
--- a/tests/ndc_test/main.cxx
+++ b/tests/ndc_test/main.cxx
@@ -21,7 +21,7 @@ main()
         SharedObjectPtr<Appender> append_1(new ConsoleAppender());
         append_1->setName(LOG4CPLUS_TEXT("First"));
         append_1->setLayout(
-            std::auto_ptr<Layout>(
+            std::unique_ptr<Layout>(
                 new log4cplus::PatternLayout(
                     LOG4CPLUS_TEXT ("%-5p %c <%x> - %m%n"))));
         Logger::getRoot().addAppender(append_1);
diff --git a/tests/patternlayout_test/main.cxx b/tests/patternlayout_test/main.cxx
index ba5466b..59e0134 100644
--- a/tests/patternlayout_test/main.cxx
+++ b/tests/patternlayout_test/main.cxx
@@ -29,7 +29,7 @@ main()
             LOG4CPLUS_TEXT ("MDC value"));
         log4cplus::tstring pattern = LOG4CPLUS_TEXT("%d{%m/%d/%y %H:%M:%S,%Q} [%t] %-5p %c{2} %%%x%% - %X{key} - %m [%l]%n");
         //	std::tstring pattern = LOG4CPLUS_TEXT("%d{%c} [%t] %-5p [%.15c{3}] %%%x%% - %m [%l]%n");
-        append_1->setLayout( std::auto_ptr<Layout>(new PatternLayout(pattern)) );
+        append_1->setLayout( std::unique_ptr<Layout>(new PatternLayout(pattern)) );
         Logger::getRoot().addAppender(append_1);
 
         Logger logger = Logger::getInstance(LOG4CPLUS_TEXT("test.a.long_logger_name.c.logger"));
diff --git a/tests/priority_test/main.cxx b/tests/priority_test/main.cxx
index 7d31cb5..1b22bca 100644
--- a/tests/priority_test/main.cxx
+++ b/tests/priority_test/main.cxx
@@ -22,7 +22,7 @@ main()
     {
     SharedAppenderPtr append_1(new ConsoleAppender());
     append_1->setName(LOG4CPLUS_TEXT("First"));
-//    append_1->setLayout( std::auto_ptr<Layout>(new TTCCLayout()) );
+//    append_1->setLayout( std::unique_ptr<Layout>(new TTCCLayout()) );
     cout << "Getting root logger...DONE" << endl;
     Logger::getRoot().addAppender(append_1);
 
diff --git a/tests/thread_test/main.cxx b/tests/thread_test/main.cxx
index dfeb0b7..fd31a7c 100644
--- a/tests/thread_test/main.cxx
+++ b/tests/thread_test/main.cxx
@@ -79,7 +79,7 @@ main()
     log4cplus::initialize();
     try
     {    
-        auto_ptr<SlowObject> slowObject(new SlowObject());
+        unique_ptr<SlowObject> slowObject(new SlowObject());
         log4cplus::helpers::LogLog::getLogLog()->setInternalDebugging(true);
         Logger logger = Logger::getInstance(LOG4CPLUS_TEXT("main"));
         Logger::getRoot().setLogLevel(INFO_LOG_LEVEL);
@@ -87,7 +87,7 @@ main()
         tcout << "main Priority: " << getLogLevelManager().toString(ll) << endl;
 
         helpers::SharedObjectPtr<Appender> append_1(new ConsoleAppender());
-        append_1->setLayout( std::auto_ptr<Layout>(new log4cplus::TTCCLayout()) );
+        append_1->setLayout( std::unique_ptr<Layout>(new log4cplus::TTCCLayout()) );
         Logger::getRoot().addAppender(append_1);
         append_1->setName(LOG4CPLUS_TEXT("cout"));
 
